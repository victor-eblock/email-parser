buildscript {
    ext.kotlin_version = '1.0.3'

    repositories {
        mavenCentral()

    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'

mainClassName = 'practice.email.executable.QuoteParserExampleKt'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'jakarta.mail:mail:1.4.7'
    compile 'nz.ac.waikato.cms.weka:weka-stable:3.8.0'
    compile 'nz.ac.waikato.cms.weka:XMeans:1.0.4'
    compile 'nz.ac.waikato.cms.weka:levenshteinEditDistance:1.0.2'

    compile group: 'com.intellij', name: 'annotations', version: '12.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.jetbrains.spek:spek:0.1.195'
}

repositories {
    mavenCentral()
    maven {
        url "http://repository.jetbrains.com/simple/spek"
    }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
task wrapper(type: Wrapper) {
    gradleVersion = "2.11"
}

run {
    standardInput = System.in

    if (project.hasProperty('emlFile')) {
        args emlFile.split('\n')
    }
}

task runQHS(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'practice.email.executable.QuoteHeaderSuggestionsExecutableKt'

    if (project.hasProperty('paths')) {
        args(paths.split(';'))
    }
}

task runEditDistance(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'practice.email.executable.EditDistanceExecutableKt'

    if (project.hasProperty('headers')) {
        args(headers.split(','))
    }
}

task runClustering(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'practice.email.executable.ClusteringExecutableKt'
}

task runProcessing(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'practice.email.executable.QuoteParserExampleKt'

    if (project.hasProperty('emlFile')) {
        args emlFile.split('\n')
    }
}
